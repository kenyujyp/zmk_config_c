/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

/dts-v1/;
#include <nordic/nrf52840_qiaa.dtsi>
#include <zephyr/dt-bindings/dt-util.h>
#include <zephyr/dt-bindings/adc/adc.h>
#include <zephyr/dt-bindings/gpio/nordic-nrf-gpio.h>
#include <dt-bindings/zmk/matrix_transform.h>
#include <freq.h>
#include <dt-bindings/gpio/gpio.h> // Required for GPIO flags
#include "lpgalaxy_le_zapybara-layout.dtsi"

&adc {
    status = "okay";

    #address-cells = <1>;
    #size-cells = <0>;

    channel@3 {
        reg = <3>;
        zephyr,gain = "ADC_GAIN_1_4";
        zephyr,reference = "ADC_REF_INTERNAL";
        zephyr,acquisition-time = <ADC_ACQ_TIME(ADC_ACQ_TIME_MICROSECONDS, 40)>;
        zephyr,resolution = <12>;
    };

    channel@1 {
        reg = <1>;
        zephyr,gain = "ADC_GAIN_1_4";
        zephyr,reference = "ADC_REF_INTERNAL";
        zephyr,acquisition-time = <ADC_ACQ_TIME(ADC_ACQ_TIME_MICROSECONDS, 3)>;
        zephyr,resolution = <12>;
    };
};


/ {
    chosen {
        zmk,kscan = &matrix;
        zephyr,code-partition = &code_partition;
        zephyr,sram = &sram0;
        zephyr,flash = &flash0;
	    zerhyr,console = &cdc_acm_uart;
	    zerhyr,shell-uart = &cdc_acm_uart;
        zmk,battery = &vbatt;
	    zmk,physical-layout = &layout_0;
    };

    /* mux enable and selection pins */
    left_mux: left_mux {
        compatible = "zmk,gpio-mux";
        select-gpios
            = <&gpio0 29 GPIO_ACTIVE_HIGH>
            , <&gpio0 30  GPIO_ACTIVE_HIGH>
            , <&gpio0 31 GPIO_ACTIVE_HIGH>
            ;
        gpio-controller;
        ngpios = <8>;
        #gpio-cells = <2>;
        en-gpios = <&gpio1 9 GPIO_ACTIVE_LOW>;
    };

    right_mux: right_mux {
        compatible = "zmk,gpio-mux";
        select-gpios
            = <&gpio0 29 GPIO_ACTIVE_HIGH>
            , <&gpio0 30  GPIO_ACTIVE_HIGH>
            , <&gpio0 31 GPIO_ACTIVE_HIGH>
            ;
        gpio-controller;
        ngpios = <8>;
        #gpio-cells = <2>;
        en-gpios = <&gpio1 10 GPIO_ACTIVE_LOW>;
    };

    matrix: matrix {
		compatible = "zmk,kscan-ec-matrix";

		matrix-relax-us = <800>;
		adc-read-settle-us = <1>;
		// trigger-percentage = <70>;
        io-channels = <&adc 1>;
        active-polling-interval-ms = <2>;
        idle-polling-interval-ms = <3>;
        drain-gpios = <&gpio0 2 (GPIO_ACTIVE_HIGH | NRF_GPIO_DRIVE_H0H1)>;
        power-gpios = <&gpio1 13 (GPIO_ACTIVE_HIGH)>;
		matrix-warm-up-us = <500>;

        strobe-gpios
		    = <&gpio0 13  (GPIO_ACTIVE_HIGH)>
            , <&gpio0 24 (GPIO_ACTIVE_HIGH)>
            , <&gpio0 3  (GPIO_ACTIVE_HIGH)>
            , <&gpio1 6  (GPIO_ACTIVE_HIGH)>
            , <&gpio1 11  (GPIO_ACTIVE_HIGH)>
            ;
    
        strobe-input-masks = <
            (BIT(13))
            0
            (BIT(13))
            (BIT(11))
            (BIT(3) + BIT(5) + BIT(6) + BIT(7) + BIT(9) + BIT(10) + BIT(11) + BIT(12) + BIT(13))
        >;

		input-gpios
            = <&left_mux 0 0>
            , <&left_mux 3 0>
            , <&left_mux 1 0>
            , <&left_mux 2 0>
            , <&left_mux 5 0>
            , <&left_mux 4 0>
            , <&left_mux 7 0>
            , <&left_mux 6 0>
            , <&right_mux 0 0>
            , <&right_mux 3 0>
            , <&right_mux 1 0>
            , <&right_mux 2 0>
            , <&right_mux 5 0>
            , <&right_mux 7 0>
			;
    };

    vbatt: vbatt {
        compatible = "zmk,battery-voltage-divider";
        io-channels = <&adc 3>;
        output-ohms = <2000000>;
        full-ohms = <(2000000 + 806000)>;
    };

    /* motion sensor interrupt */
    motion_interrupt_pin: motion_interrupt {
        compatible = "gpio-keys";
        my_pin: my_pin {
            gpios = <&gpio1 40 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>;
        };
        wakeup-source;
    };

    transform: transform {
        compatible = "zmk,matrix-transform";
        rows = <5>;
        columns = <14>;

        map = <
        RC(0,0) RC(0,1) RC(0,2) RC(0,3) RC(0,4) RC(0,5) RC(0,6) RC(0,7) RC(0,8) RC(0,9) RC(0,10) RC(0,11) RC(0,12)
        RC(1,0) RC(1,1) RC(1,2) RC(1,3) RC(1,4) RC(1,5) RC(1,6) RC(1,7) RC(1,8) RC(1,9) RC(1,10) RC(1,11) RC(1,12) RC(1,13)
        RC(2,0) RC(2,1) RC(2,2) RC(2,3) RC(2,4) RC(2,5) RC(2,6) RC(2,7) RC(2,8) RC(2,9) RC(2,10) RC(2,11) RC(2,12)
        RC(3,0) RC(3,1) RC(3,2) RC(3,3) RC(3,4) RC(3,5) RC(3,6) RC(3,7) RC(3,8) RC(3,9) RC(3,10)          RC(3,12) RC(3,13)
        RC(4,0) RC(4,1) RC(4,2)         RC(4,4)                         RC(4,8)      
        >;
    };
};

/*
 * &pinctrl {
 *   spi1_default: spi1_default {
 *   };
 *
 *   spi1_sleep: spi1_sleep {
 *   };
 * };
 */

/* need to work on this wake up trigger */
// &spi1 {
//    status = "okay";
//    
//    pinctrl-0 = <&spi1_default>;
//    pinctrl-1 = <&spi1_sleep>;
//    pinctrl-names = "default", "sleep";
//
//    wakeup_trigger: wakeup_trigger@0 {
//        reg = <0>;
//
//        spi-max-frequency = <DT_FREQ_M(8)>;
//
//        compatible = "zmk,adxl362-awake-trigger";
//        wakeup-source;
//
//        linked-devices = <&matrix>;
//
//        wakeup_trigger_settings: normal {
//            activity-threshold = <18>;
//            activity-time = <0>;
//            inactivity-threshold = <60>;
//            inactivity-time = <100>;
//        };
//
//        wakeup_trigger_sleep_settings: sleep {
//            activity-threshold = <140>;
//            activity-time = <0>;
//            inactivity-threshold = <500>;
//            inactivity-time = <0>;
//        };
//    };
//};

&gpiote {
	status = "okay";
};

&gpio0 {
	status = "okay";
};

&gpio1 {
	status = "okay";
};

zephyr_udc0: &usbd {
	status = "okay";
        cdc_acm_uart: cdc_acm_uart {
                compatible = "zephyr,cdc-acm-uart";
        };
};

&flash0 {
	/*
	 * For more information, see:
	 * http://docs.zephyrproject.org/latest/devices/dts/flash_partitions.html
	 */
	partitions {
		compatible = "fixed-partitions";
		#address-cells = <1>;
		#size-cells = <1>;

		sd_partition: partition@0 {
			label = "mbr";
			reg = <0x00000000 0x00001000>;
		};
		code_partition: partition@1000 {
			label = "code_partition";
			reg = <0x00001000 0x000d3000>;
		};

		storage_partition: partition@d4000 {
			label = "storage";
			reg = <0x000d4000 0x00020000>;
		};

		boot_partition: partition@f4000 {
			label = "adafruit_boot";
			reg = <0x000f4000 0x0000c000>;
		};
	};
};

&adc {
    // Battery Sensing
    channel@3 {
        zephyr,input-positive = <NRF_SAADC_AIN3>; /* P0.05 */
    };

    // EC Read
    channel@1 {
        zephyr,input-positive = <NRF_SAADC_AIN4>; /* P0.28 */
    };
};

/*
&matrix {
		precalib-avg-highs = <
            3509
            3278
            3054
            3106
            3633
            3004
            3474
            3652
            2868
            3550
            2930
            3621
            3548
            3636
            3343
            3430
            3581
            3584
            3253
            3609
            3651
            3318
            3271
            3345
            3643
            3495
            3578
            3281
            3258
            3258
            3258
            3258
            3258
            3437
            3251
            2826
            3315
            3258
            3258
            3258
	    >;
        precalib-avg-lows = <
            500
            500
            500
            500
            500
            500
            500
            500
            500
            500
            500
            500
            500
            500
            500
            500
            500
            500
            500
            750
            500
            680
            680
            790
            576
            407
            500
            500
            500
            500
            500
            500
            500
            500
            500
            500
            500
            500
            500
            500
	    >;
    */
};